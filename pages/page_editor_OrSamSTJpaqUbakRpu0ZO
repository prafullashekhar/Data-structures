{"root":{"children":[{"children":[{"detail":0,"format":0,"mode":"normal","style":"","text":"DFS","type":"text","version":1}],"direction":"ltr","format":"","indent":0,"type":"toc-heading","version":1,"tag":"h1","id":"dfs"},{"children":[{"detail":0,"format":0,"mode":"normal","style":"","text":"DFS","type":"text","version":1},{"children":[],"direction":null,"format":"","indent":0,"type":"custom-link","version":1,"rel":null,"target":null,"title":null,"url":"#dfs"}],"direction":"ltr","format":"start","indent":0,"type":"toc-heading","version":1,"tag":"h2","id":"dfs"},{"children":[{"detail":0,"format":0,"mode":"normal","style":"","text":"Initialisizing the adj matrix, and vis[i] will denote in which component it is lying if it is not equal to 0, and if it is 0, then that node is not visited.","type":"text","version":1},{"type":"linebreak","version":1},{"type":"linebreak","version":1},{"detail":0,"format":0,"mode":"normal","style":"","text":"Use of Stack or Recursion","type":"text","version":1}],"direction":"ltr","format":"start","indent":0,"type":"quote","version":1},{"codeSrc":"// Some code\nvector<vector<int>> adj;\nvector<int> vis;\n\nvoid dfs(int node, int comp){\n    vis[node]=comp;\n    for(auto v:adj[node]){\n        if(!vis[v]) dfs(v, comp);\n    }\n}\n\nint main(){\n    int n, m; cin>>n>>m;\n    adj.resize(n+1) // resize it to n if vertex number start from 0\n    vis.assign(n+1, 0) // assign function will resign the array and assigns value to each\n    \n    for(int i=0; i<m; i++){\n        int u, v; cin>>u>>v;\n        adj[u].push_back(v);\n        adj[v].push_back(u);\n    }\n    \n    int comp_cnt = 0;\n    // this is done to check for each component\n    for(int i=1; i<=n; i++){\n        if(!vis[i]){\n            comp_cnt++;\n            dfs(i, comp_cnt);\n        }\n    }\n}","language":"cpp","languageTitle":"C++","codeHtml":"<pre class=\"shiki shiki-themes github-light-default github-dark-default\" style=\"background-color:#f1f5f9;--shiki-dark-bg:#0d1117;color:#1f2328;--shiki-dark:#e6edf3\" tabindex=\"0\"><code class=\"code-view\"><span class=\"line\" data-line=\"1\"><span style=\"color:#6E7781;--shiki-dark:#8B949E\">// Some code</span></span>\n<span class=\"line\" data-line=\"2\"><span style=\"color:#1F2328;--shiki-dark:#E6EDF3\">vector</span><span style=\"color:#CF222E;--shiki-dark:#FF7B72\">&#x3C;</span><span style=\"color:#1F2328;--shiki-dark:#E6EDF3\">vector</span><span style=\"color:#CF222E;--shiki-dark:#FF7B72\">&#x3C;int>></span><span style=\"color:#1F2328;--shiki-dark:#E6EDF3\"> adj;</span></span>\n<span class=\"line\" data-line=\"3\"><span style=\"color:#1F2328;--shiki-dark:#E6EDF3\">vector</span><span style=\"color:#CF222E;--shiki-dark:#FF7B72\">&#x3C;int></span><span style=\"color:#1F2328;--shiki-dark:#E6EDF3\"> vis;</span></span>\n<span class=\"line\" data-line=\"4\"></span>\n<span class=\"line\" data-line=\"5\"><span style=\"color:#CF222E;--shiki-dark:#FF7B72\">void</span><span style=\"color:#8250DF;--shiki-dark:#D2A8FF\"> dfs</span><span style=\"color:#1F2328;--shiki-dark:#E6EDF3\">(</span><span style=\"color:#CF222E;--shiki-dark:#FF7B72\">int</span><span style=\"color:#953800;--shiki-dark:#FFA657\"> node</span><span style=\"color:#1F2328;--shiki-dark:#E6EDF3\">, </span><span style=\"color:#CF222E;--shiki-dark:#FF7B72\">int</span><span style=\"color:#953800;--shiki-dark:#FFA657\"> comp</span><span style=\"color:#1F2328;--shiki-dark:#E6EDF3\">){</span></span>\n<span class=\"line\" data-line=\"6\"><span style=\"color:#1F2328;--shiki-dark:#E6EDF3\">    vis[node]</span><span style=\"color:#CF222E;--shiki-dark:#FF7B72\">=</span><span style=\"color:#1F2328;--shiki-dark:#E6EDF3\">comp;</span></span>\n<span class=\"line\" data-line=\"7\"><span style=\"color:#CF222E;--shiki-dark:#FF7B72\">    for</span><span style=\"color:#1F2328;--shiki-dark:#E6EDF3\">(</span><span style=\"color:#CF222E;--shiki-dark:#FF7B72\">auto</span><span style=\"color:#1F2328;--shiki-dark:#E6EDF3\"> v:adj[node]){</span></span>\n<span class=\"line\" data-line=\"8\"><span style=\"color:#CF222E;--shiki-dark:#FF7B72\">        if</span><span style=\"color:#1F2328;--shiki-dark:#E6EDF3\">(</span><span style=\"color:#CF222E;--shiki-dark:#FF7B72\">!</span><span style=\"color:#1F2328;--shiki-dark:#E6EDF3\">vis[v]) </span><span style=\"color:#8250DF;--shiki-dark:#D2A8FF\">dfs</span><span style=\"color:#1F2328;--shiki-dark:#E6EDF3\">(v, comp);</span></span>\n<span class=\"line\" data-line=\"9\"><span style=\"color:#1F2328;--shiki-dark:#E6EDF3\">    }</span></span>\n<span class=\"line\" data-line=\"10\"><span style=\"color:#1F2328;--shiki-dark:#E6EDF3\">}</span></span>\n<span class=\"line\" data-line=\"11\"></span>\n<span class=\"line\" data-line=\"12\"><span style=\"color:#CF222E;--shiki-dark:#FF7B72\">int</span><span style=\"color:#8250DF;--shiki-dark:#D2A8FF\"> main</span><span style=\"color:#1F2328;--shiki-dark:#E6EDF3\">(){</span></span>\n<span class=\"line\" data-line=\"13\"><span style=\"color:#CF222E;--shiki-dark:#FF7B72\">    int</span><span style=\"color:#1F2328;--shiki-dark:#E6EDF3\"> n, m; cin</span><span style=\"color:#CF222E;--shiki-dark:#FF7B72\">>></span><span style=\"color:#1F2328;--shiki-dark:#E6EDF3\">n</span><span style=\"color:#CF222E;--shiki-dark:#FF7B72\">>></span><span style=\"color:#1F2328;--shiki-dark:#E6EDF3\">m;</span></span>\n<span class=\"line\" data-line=\"14\"><span style=\"color:#1F2328;--shiki-dark:#E6EDF3\">    adj.</span><span style=\"color:#8250DF;--shiki-dark:#D2A8FF\">resize</span><span style=\"color:#1F2328;--shiki-dark:#E6EDF3\">(n</span><span style=\"color:#CF222E;--shiki-dark:#FF7B72\">+</span><span style=\"color:#0550AE;--shiki-dark:#79C0FF\">1</span><span style=\"color:#1F2328;--shiki-dark:#E6EDF3\">)</span><span style=\"color:#6E7781;--shiki-dark:#8B949E\"> // resize it to n if vertex number start from 0</span></span>\n<span class=\"line\" data-line=\"15\"><span style=\"color:#1F2328;--shiki-dark:#E6EDF3\">    vis.</span><span style=\"color:#8250DF;--shiki-dark:#D2A8FF\">assign</span><span style=\"color:#1F2328;--shiki-dark:#E6EDF3\">(n</span><span style=\"color:#CF222E;--shiki-dark:#FF7B72\">+</span><span style=\"color:#0550AE;--shiki-dark:#79C0FF\">1</span><span style=\"color:#1F2328;--shiki-dark:#E6EDF3\">, </span><span style=\"color:#0550AE;--shiki-dark:#79C0FF\">0</span><span style=\"color:#1F2328;--shiki-dark:#E6EDF3\">)</span><span style=\"color:#6E7781;--shiki-dark:#8B949E\"> // assign function will resign the array and assigns value to each</span></span>\n<span class=\"line\" data-line=\"16\"><span style=\"color:#1F2328;--shiki-dark:#E6EDF3\">    </span></span>\n<span class=\"line\" data-line=\"17\"><span style=\"color:#CF222E;--shiki-dark:#FF7B72\">    for</span><span style=\"color:#1F2328;--shiki-dark:#E6EDF3\">(</span><span style=\"color:#CF222E;--shiki-dark:#FF7B72\">int</span><span style=\"color:#1F2328;--shiki-dark:#E6EDF3\"> i</span><span style=\"color:#CF222E;--shiki-dark:#FF7B72\">=</span><span style=\"color:#0550AE;--shiki-dark:#79C0FF\">0</span><span style=\"color:#1F2328;--shiki-dark:#E6EDF3\">; i</span><span style=\"color:#CF222E;--shiki-dark:#FF7B72\">&#x3C;</span><span style=\"color:#1F2328;--shiki-dark:#E6EDF3\">m; i</span><span style=\"color:#CF222E;--shiki-dark:#FF7B72\">++</span><span style=\"color:#1F2328;--shiki-dark:#E6EDF3\">){</span></span>\n<span class=\"line\" data-line=\"18\"><span style=\"color:#CF222E;--shiki-dark:#FF7B72\">        int</span><span style=\"color:#1F2328;--shiki-dark:#E6EDF3\"> u, v; cin</span><span style=\"color:#CF222E;--shiki-dark:#FF7B72\">>></span><span style=\"color:#1F2328;--shiki-dark:#E6EDF3\">u</span><span style=\"color:#CF222E;--shiki-dark:#FF7B72\">>></span><span style=\"color:#1F2328;--shiki-dark:#E6EDF3\">v;</span></span>\n<span class=\"line\" data-line=\"19\"><span style=\"color:#1F2328;--shiki-dark:#E6EDF3\">        adj[u].</span><span style=\"color:#8250DF;--shiki-dark:#D2A8FF\">push_back</span><span style=\"color:#1F2328;--shiki-dark:#E6EDF3\">(v);</span></span>\n<span class=\"line\" data-line=\"20\"><span style=\"color:#1F2328;--shiki-dark:#E6EDF3\">        adj[v].</span><span style=\"color:#8250DF;--shiki-dark:#D2A8FF\">push_back</span><span style=\"color:#1F2328;--shiki-dark:#E6EDF3\">(u);</span></span>\n<span class=\"line\" data-line=\"21\"><span style=\"color:#1F2328;--shiki-dark:#E6EDF3\">    }</span></span>\n<span class=\"line\" data-line=\"22\"><span style=\"color:#1F2328;--shiki-dark:#E6EDF3\">    </span></span>\n<span class=\"line\" data-line=\"23\"><span style=\"color:#CF222E;--shiki-dark:#FF7B72\">    int</span><span style=\"color:#1F2328;--shiki-dark:#E6EDF3\"> comp_cnt </span><span style=\"color:#CF222E;--shiki-dark:#FF7B72\">=</span><span style=\"color:#0550AE;--shiki-dark:#79C0FF\"> 0</span><span style=\"color:#1F2328;--shiki-dark:#E6EDF3\">;</span></span>\n<span class=\"line\" data-line=\"24\"><span style=\"color:#6E7781;--shiki-dark:#8B949E\">    // this is done to check for each component</span></span>\n<span class=\"line\" data-line=\"25\"><span style=\"color:#CF222E;--shiki-dark:#FF7B72\">    for</span><span style=\"color:#1F2328;--shiki-dark:#E6EDF3\">(</span><span style=\"color:#CF222E;--shiki-dark:#FF7B72\">int</span><span style=\"color:#1F2328;--shiki-dark:#E6EDF3\"> i</span><span style=\"color:#CF222E;--shiki-dark:#FF7B72\">=</span><span style=\"color:#0550AE;--shiki-dark:#79C0FF\">1</span><span style=\"color:#1F2328;--shiki-dark:#E6EDF3\">; i</span><span style=\"color:#CF222E;--shiki-dark:#FF7B72\">&#x3C;=</span><span style=\"color:#1F2328;--shiki-dark:#E6EDF3\">n; i</span><span style=\"color:#CF222E;--shiki-dark:#FF7B72\">++</span><span style=\"color:#1F2328;--shiki-dark:#E6EDF3\">){</span></span>\n<span class=\"line\" data-line=\"26\"><span style=\"color:#CF222E;--shiki-dark:#FF7B72\">        if</span><span style=\"color:#1F2328;--shiki-dark:#E6EDF3\">(</span><span style=\"color:#CF222E;--shiki-dark:#FF7B72\">!</span><span style=\"color:#1F2328;--shiki-dark:#E6EDF3\">vis[i]){</span></span>\n<span class=\"line\" data-line=\"27\"><span style=\"color:#1F2328;--shiki-dark:#E6EDF3\">            comp_cnt</span><span style=\"color:#CF222E;--shiki-dark:#FF7B72\">++</span><span style=\"color:#1F2328;--shiki-dark:#E6EDF3\">;</span></span>\n<span class=\"line\" data-line=\"28\"><span style=\"color:#8250DF;--shiki-dark:#D2A8FF\">            dfs</span><span style=\"color:#1F2328;--shiki-dark:#E6EDF3\">(i, comp_cnt);</span></span>\n<span class=\"line\" data-line=\"29\"><span style=\"color:#1F2328;--shiki-dark:#E6EDF3\">        }</span></span>\n<span class=\"line\" data-line=\"30\"><span style=\"color:#1F2328;--shiki-dark:#E6EDF3\">    }</span></span>\n<span class=\"line\" data-line=\"31\"><span style=\"color:#1F2328;--shiki-dark:#E6EDF3\">}</span></span></code></pre>","height":"799px","type":"code-block","version":1},{"children":[],"direction":null,"format":"start","indent":0,"type":"paragraph","version":1,"textFormat":0,"textStyle":""}],"direction":"ltr","format":"","indent":0,"type":"root","version":1}}